
RTOS_IN_L053R8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c0  080032c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c8  080032c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080032d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000074  08003344  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e0  08003344  000210e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce74  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000211e  00000000  00000000  0002cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002f030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ab3  00000000  00000000  00030808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd81  00000000  00000000  000452bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081222  00000000  00000000  0005203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d325e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f00  00000000  00000000  000d32b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031a4 	.word	0x080031a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080031a4 	.word	0x080031a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <vApplicationGetIdleTaskMemory+0x28>)
 80004b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000090 	.word	0x20000090
 80004d4:	20000144 	.word	0x20000144

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b096      	sub	sp, #88	; 0x58
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fa05 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f843 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f89b 	bl	8000620 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004ea:	213c      	movs	r1, #60	; 0x3c
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <main+0x7c>)
 80004f0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004f2:	c331      	stmia	r3!, {r0, r4, r5}
 80004f4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004f6:	c331      	stmia	r3!, {r0, r4, r5}
 80004f8:	6812      	ldr	r2, [r2, #0]
 80004fa:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2100      	movs	r1, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fca0 	bl	8001e46 <osThreadCreate>
 8000506:	0002      	movs	r2, r0
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <main+0x80>)
 800050a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800050c:	2120      	movs	r1, #32
 800050e:	187b      	adds	r3, r7, r1
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <main+0x84>)
 8000512:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000514:	c331      	stmia	r3!, {r0, r4, r5}
 8000516:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000518:	c331      	stmia	r3!, {r0, r4, r5}
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2100      	movs	r1, #0
 8000522:	0018      	movs	r0, r3
 8000524:	f001 fc8f 	bl	8001e46 <osThreadCreate>
 8000528:	0002      	movs	r2, r0
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0x88>)
 800052c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x8c>)
 8000532:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000534:	c313      	stmia	r3!, {r0, r1, r4}
 8000536:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000538:	c313      	stmia	r3!, {r0, r1, r4}
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	601a      	str	r2, [r3, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2100      	movs	r1, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fc7f 	bl	8001e46 <osThreadCreate>
 8000548:	0002      	movs	r2, r0
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <main+0x90>)
 800054c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800054e:	f001 fc72 	bl	8001e36 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000552:	e7fe      	b.n	8000552 <main+0x7a>
 8000554:	080031e0 	.word	0x080031e0
 8000558:	20000344 	.word	0x20000344
 800055c:	080031fc 	.word	0x080031fc
 8000560:	20000348 	.word	0x20000348
 8000564:	08003218 	.word	0x08003218
 8000568:	2000034c 	.word	0x2000034c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b095      	sub	sp, #84	; 0x54
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	2418      	movs	r4, #24
 8000574:	193b      	adds	r3, r7, r4
 8000576:	0018      	movs	r0, r3
 8000578:	2338      	movs	r3, #56	; 0x38
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f002 fd3b 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f002 fd34 	bl	8002ff8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <SystemClock_Config+0xac>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xb0>)
 8000596:	401a      	ands	r2, r3
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xac>)
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	0109      	lsls	r1, r1, #4
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	0021      	movs	r1, r4
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	0252      	lsls	r2, r2, #9
 80005b0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2202      	movs	r2, #2
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	0252      	lsls	r2, r2, #9
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	22c0      	movs	r2, #192	; 0xc0
 80005c4:	0312      	lsls	r2, r2, #12
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	03d2      	lsls	r2, r2, #15
 80005ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fc22 	bl	8000e1c <HAL_RCC_OscConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005dc:	f000 f8a6 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	220f      	movs	r2, #15
 80005e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2203      	movs	r2, #3
 80005ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2101      	movs	r1, #1
 8000602:	0018      	movs	r0, r3
 8000604:	f000 ffce 	bl	80015a4 <HAL_RCC_ClockConfig>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800060c:	f000 f88e 	bl	800072c <Error_Handler>
  }
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b015      	add	sp, #84	; 0x54
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	40007000 	.word	0x40007000
 800061c:	ffffe7ff 	.word	0xffffe7ff

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	240c      	movs	r4, #12
 8000628:	193b      	adds	r3, r7, r4
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f002 fce1 	bl	8002ff8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_GPIO_Init+0x84>)
 8000638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_GPIO_Init+0x84>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	430a      	orrs	r2, r1
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_GPIO_Init+0x84>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_GPIO_Init+0x84>)
 8000650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_GPIO_Init+0x84>)
 8000654:	2101      	movs	r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_GPIO_Init+0x84>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5, GPIO_PIN_RESET);
 8000666:	23a0      	movs	r3, #160	; 0xa0
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	2200      	movs	r2, #0
 800066c:	2127      	movs	r1, #39	; 0x27
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fb9c 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 8000674:	0021      	movs	r1, r4
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2227      	movs	r2, #39	; 0x27
 800067a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2201      	movs	r2, #1
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	187a      	adds	r2, r7, r1
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fa12 	bl	8000ac0 <HAL_GPIO_Init>

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b009      	add	sp, #36	; 0x24
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2104      	movs	r1, #4
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fb95 	bl	8000de6 <HAL_GPIO_TogglePin>
	      osDelay(1000);
 80006bc:	23fa      	movs	r3, #250	; 0xfa
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fc0d 	bl	8001ee0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80006c6:	e7f3      	b.n	80006b0 <StartDefaultTask+0x8>

080006c8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2102      	movs	r1, #2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fb85 	bl	8000de6 <HAL_GPIO_TogglePin>
    osDelay(2000);
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fbfd 	bl	8001ee0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006e6:	e7f3      	b.n	80006d0 <StartTask02+0x8>

080006e8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2120      	movs	r1, #32
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fb75 	bl	8000de6 <HAL_GPIO_TogglePin>
	      osDelay(3000);
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <StartTask03+0x20>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fbee 	bl	8001ee0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000704:	e7f4      	b.n	80006f0 <StartTask03+0x8>
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	00000bb8 	.word	0x00000bb8

0800070c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	429a      	cmp	r2, r3
 800071e:	d101      	bne.n	8000724 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000720:	f000 f904 	bl	800092c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <HAL_MspInit+0x34>)
 800073e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_MspInit+0x34>)
 8000742:	2101      	movs	r1, #1
 8000744:	430a      	orrs	r2, r1
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_MspInit+0x34>)
 800074a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <HAL_MspInit+0x34>)
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	0549      	lsls	r1, r1, #21
 8000752:	430a      	orrs	r2, r1
 8000754:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000756:	2302      	movs	r3, #2
 8000758:	425b      	negs	r3, r3
 800075a:	2200      	movs	r2, #0
 800075c:	2103      	movs	r1, #3
 800075e:	0018      	movs	r0, r3
 8000760:	f000 f988 	bl	8000a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	0019      	movs	r1, r3
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f978 	bl	8000a74 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000784:	200f      	movs	r0, #15
 8000786:	f000 f98a 	bl	8000a9e <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800078a:	4b32      	ldr	r3, [pc, #200]	; (8000854 <HAL_InitTick+0xe4>)
 800078c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <HAL_InitTick+0xe4>)
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000796:	2308      	movs	r3, #8
 8000798:	18fa      	adds	r2, r7, r3
 800079a:	240c      	movs	r4, #12
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f90d 	bl	80019c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007b2:	f001 f8ef 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 80007b6:	0003      	movs	r3, r0
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007ba:	e004      	b.n	80007c6 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007bc:	f001 f8ea 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 80007c0:	0003      	movs	r3, r0
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	4923      	ldr	r1, [pc, #140]	; (8000858 <HAL_InitTick+0xe8>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff fc9c 	bl	8000108 <__udivsi3>
 80007d0:	0003      	movs	r3, r0
 80007d2:	3b01      	subs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <HAL_InitTick+0xec>)
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	05d2      	lsls	r2, r2, #23
 80007dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <HAL_InitTick+0xec>)
 80007e0:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <HAL_InitTick+0xf0>)
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <HAL_InitTick+0xec>)
 80007e6:	6a3a      	ldr	r2, [r7, #32]
 80007e8:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <HAL_InitTick+0xec>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <HAL_InitTick+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 80007f6:	252b      	movs	r5, #43	; 0x2b
 80007f8:	197c      	adds	r4, r7, r5
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <HAL_InitTick+0xec>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 f911 	bl	8001a24 <HAL_TIM_Base_Init>
 8000802:	0003      	movs	r3, r0
 8000804:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000806:	197b      	adds	r3, r7, r5
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d11b      	bne.n	8000846 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800080e:	197c      	adds	r4, r7, r5
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0xec>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 f94e 	bl	8001ab4 <HAL_TIM_Base_Start_IT>
 8000818:	0003      	movs	r3, r0
 800081a:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800081c:	197b      	adds	r3, r7, r5
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d110      	bne.n	8000846 <HAL_InitTick+0xd6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b03      	cmp	r3, #3
 8000828:	d809      	bhi.n	800083e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	0019      	movs	r1, r3
 8000830:	200f      	movs	r0, #15
 8000832:	f000 f91f 	bl	8000a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_InitTick+0xf4>)
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	e003      	b.n	8000846 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800083e:	232b      	movs	r3, #43	; 0x2b
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000846:	232b      	movs	r3, #43	; 0x2b
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	781b      	ldrb	r3, [r3, #0]
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	b00c      	add	sp, #48	; 0x30
 8000852:	bdb0      	pop	{r4, r5, r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	000f4240 	.word	0x000f4240
 800085c:	20000350 	.word	0x20000350
 8000860:	000003e7 	.word	0x000003e7
 8000864:	20000004 	.word	0x20000004

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <TIM2_IRQHandler+0x14>)
 800087a:	0018      	movs	r0, r3
 800087c:	f001 f966 	bl	8001b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000350 	.word	0x20000350

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800089c:	f7ff fff6 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LoopForever+0xe>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	; (80008e4 <LoopForever+0x16>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f002 fb71 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ca:	f7ff fe05 	bl	80004d8 <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   r0, =_estack
 80008d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008dc:	080032d0 	.word	0x080032d0
  ldr r2, =_sbss
 80008e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008e4:	200010e0 	.word	0x200010e0

080008e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_COMP_IRQHandler>
	...

080008ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x3c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_Init+0x3c>)
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	430a      	orrs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000904:	2003      	movs	r0, #3
 8000906:	f7ff ff33 	bl	8000770 <HAL_InitTick>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d003      	beq.n	8000916 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e001      	b.n	800091a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000916:	f7ff ff0f 	bl	8000738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
}
 800091e:	0018      	movs	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001a      	movs	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	18d2      	adds	r2, r2, r3
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	601a      	str	r2, [r3, #0]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000008 	.word	0x20000008
 800094c:	20000390 	.word	0x20000390

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000390 	.word	0x20000390

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	0002      	movs	r2, r0
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b7f      	cmp	r3, #127	; 0x7f
 8000976:	d809      	bhi.n	800098c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	001a      	movs	r2, r3
 800097e:	231f      	movs	r3, #31
 8000980:	401a      	ands	r2, r3
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <__NVIC_EnableIRQ+0x30>)
 8000984:	2101      	movs	r1, #1
 8000986:	4091      	lsls	r1, r2
 8000988:	000a      	movs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
  }
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}
 8000994:	e000e100 	.word	0xe000e100

08000998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	0002      	movs	r2, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b7f      	cmp	r3, #127	; 0x7f
 80009ac:	d828      	bhi.n	8000a00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ae:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <__NVIC_SetPriority+0xd4>)
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	33c0      	adds	r3, #192	; 0xc0
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	589b      	ldr	r3, [r3, r2]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	0011      	movs	r1, r2
 80009c4:	2203      	movs	r2, #3
 80009c6:	400a      	ands	r2, r1
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	21ff      	movs	r1, #255	; 0xff
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	401a      	ands	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	2303      	movs	r3, #3
 80009e6:	4003      	ands	r3, r0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <__NVIC_SetPriority+0xd4>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	430a      	orrs	r2, r1
 80009f8:	33c0      	adds	r3, #192	; 0xc0
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009fe:	e031      	b.n	8000a64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <__NVIC_SetPriority+0xd8>)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	0019      	movs	r1, r3
 8000a08:	230f      	movs	r3, #15
 8000a0a:	400b      	ands	r3, r1
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3306      	adds	r3, #6
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	3304      	adds	r3, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1dfa      	adds	r2, r7, #7
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	0011      	movs	r1, r2
 8000a20:	2203      	movs	r2, #3
 8000a22:	400a      	ands	r2, r1
 8000a24:	00d2      	lsls	r2, r2, #3
 8000a26:	21ff      	movs	r1, #255	; 0xff
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	43d2      	mvns	r2, r2
 8000a2e:	401a      	ands	r2, r3
 8000a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	22ff      	movs	r2, #255	; 0xff
 8000a38:	401a      	ands	r2, r3
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2303      	movs	r3, #3
 8000a42:	4003      	ands	r3, r0
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <__NVIC_SetPriority+0xd8>)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	001c      	movs	r4, r3
 8000a50:	230f      	movs	r3, #15
 8000a52:	4023      	ands	r3, r4
 8000a54:	3b08      	subs	r3, #8
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	3306      	adds	r3, #6
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	18c3      	adds	r3, r0, r3
 8000a60:	3304      	adds	r3, #4
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b003      	add	sp, #12
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	210f      	movs	r1, #15
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	1c02      	adds	r2, r0, #0
 8000a84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff81 	bl	8000998 <__NVIC_SetPriority>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b004      	add	sp, #16
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff ff57 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ad6:	e14f      	b.n	8000d78 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2101      	movs	r1, #1
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4091      	lsls	r1, r2
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d100      	bne.n	8000af0 <HAL_GPIO_Init+0x30>
 8000aee:	e140      	b.n	8000d72 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2203      	movs	r2, #3
 8000af6:	4013      	ands	r3, r2
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d005      	beq.n	8000b08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2203      	movs	r2, #3
 8000b02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d130      	bne.n	8000b6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	409a      	lsls	r2, r3
 8000b16:	0013      	movs	r3, r2
 8000b18:	43da      	mvns	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	43da      	mvns	r2, r3
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	2201      	movs	r2, #1
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d017      	beq.n	8000ba6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2203      	movs	r2, #3
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d123      	bne.n	8000bfa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	0092      	lsls	r2, r2, #2
 8000bbc:	58d3      	ldr	r3, [r2, r3]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2207      	movs	r2, #7
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	220f      	movs	r2, #15
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	691a      	ldr	r2, [r3, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2107      	movs	r1, #7
 8000bde:	400b      	ands	r3, r1
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	08da      	lsrs	r2, r3, #3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	0092      	lsls	r2, r2, #2
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2203      	movs	r2, #3
 8000c18:	401a      	ands	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	23c0      	movs	r3, #192	; 0xc0
 8000c34:	029b      	lsls	r3, r3, #10
 8000c36:	4013      	ands	r3, r2
 8000c38:	d100      	bne.n	8000c3c <HAL_GPIO_Init+0x17c>
 8000c3a:	e09a      	b.n	8000d72 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3c:	4b54      	ldr	r3, [pc, #336]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <HAL_GPIO_Init+0x2d0>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	430a      	orrs	r2, r1
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c48:	4a52      	ldr	r2, [pc, #328]	; (8000d94 <HAL_GPIO_Init+0x2d4>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	589b      	ldr	r3, [r3, r2]
 8000c54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2203      	movs	r2, #3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	220f      	movs	r2, #15
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	43da      	mvns	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	23a0      	movs	r3, #160	; 0xa0
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d019      	beq.n	8000caa <HAL_GPIO_Init+0x1ea>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a47      	ldr	r2, [pc, #284]	; (8000d98 <HAL_GPIO_Init+0x2d8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d013      	beq.n	8000ca6 <HAL_GPIO_Init+0x1e6>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <HAL_GPIO_Init+0x2dc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d00d      	beq.n	8000ca2 <HAL_GPIO_Init+0x1e2>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a45      	ldr	r2, [pc, #276]	; (8000da0 <HAL_GPIO_Init+0x2e0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d007      	beq.n	8000c9e <HAL_GPIO_Init+0x1de>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <HAL_GPIO_Init+0x2e4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d101      	bne.n	8000c9a <HAL_GPIO_Init+0x1da>
 8000c96:	2305      	movs	r3, #5
 8000c98:	e008      	b.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e004      	b.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_Init+0x1ec>
 8000caa:	2300      	movs	r3, #0
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	2103      	movs	r1, #3
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	4093      	lsls	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cbc:	4935      	ldr	r1, [pc, #212]	; (8000d94 <HAL_GPIO_Init+0x2d4>)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cca:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	035b      	lsls	r3, r3, #13
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	039b      	lsls	r3, r3, #14
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	43da      	mvns	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	029b      	lsls	r3, r3, #10
 8000d36:	4013      	ands	r3, r2
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	025b      	lsls	r3, r3, #9
 8000d60:	4013      	ands	r3, r2
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_GPIO_Init+0x2e8>)
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	1e13      	subs	r3, r2, #0
 8000d82:	d000      	beq.n	8000d86 <HAL_GPIO_Init+0x2c6>
 8000d84:	e6a8      	b.n	8000ad8 <HAL_GPIO_Init+0x18>
  }
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b006      	add	sp, #24
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	50000400 	.word	0x50000400
 8000d9c:	50000800 	.word	0x50000800
 8000da0:	50000c00 	.word	0x50000c00
 8000da4:	50001c00 	.word	0x50001c00
 8000da8:	40010400 	.word	0x40010400

08000dac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	0008      	movs	r0, r1
 8000db6:	0011      	movs	r1, r2
 8000db8:	1cbb      	adds	r3, r7, #2
 8000dba:	1c02      	adds	r2, r0, #0
 8000dbc:	801a      	strh	r2, [r3, #0]
 8000dbe:	1c7b      	adds	r3, r7, #1
 8000dc0:	1c0a      	adds	r2, r1, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc4:	1c7b      	adds	r3, r7, #1
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d004      	beq.n	8000dd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dcc:	1cbb      	adds	r3, r7, #2
 8000dce:	881a      	ldrh	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000dd4:	e003      	b.n	8000dde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000dd6:	1cbb      	adds	r3, r7, #2
 8000dd8:	881a      	ldrh	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	000a      	movs	r2, r1
 8000df0:	1cbb      	adds	r3, r7, #2
 8000df2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dfa:	1cbb      	adds	r3, r7, #2
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	4013      	ands	r3, r2
 8000e02:	041a      	lsls	r2, r3, #16
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	1cb9      	adds	r1, r7, #2
 8000e0a:	8809      	ldrh	r1, [r1, #0]
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	619a      	str	r2, [r3, #24]
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f000 fbaf 	bl	800158e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e30:	4bcf      	ldr	r3, [pc, #828]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	220c      	movs	r2, #12
 8000e36:	4013      	ands	r3, r2
 8000e38:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e3a:	4bcd      	ldr	r3, [pc, #820]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	4013      	ands	r3, r2
 8000e44:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d100      	bne.n	8000e52 <HAL_RCC_OscConfig+0x36>
 8000e50:	e07e      	b.n	8000f50 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d007      	beq.n	8000e68 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	2b0c      	cmp	r3, #12
 8000e5c:	d112      	bne.n	8000e84 <HAL_RCC_OscConfig+0x68>
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d10d      	bne.n	8000e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e68:	4bc1      	ldr	r3, [pc, #772]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	029b      	lsls	r3, r3, #10
 8000e70:	4013      	ands	r3, r2
 8000e72:	d100      	bne.n	8000e76 <HAL_RCC_OscConfig+0x5a>
 8000e74:	e06b      	b.n	8000f4e <HAL_RCC_OscConfig+0x132>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d167      	bne.n	8000f4e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f000 fb85 	bl	800158e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	025b      	lsls	r3, r3, #9
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d107      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x84>
 8000e90:	4bb7      	ldr	r3, [pc, #732]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4bb6      	ldr	r3, [pc, #728]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	0249      	lsls	r1, r1, #9
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e027      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	23a0      	movs	r3, #160	; 0xa0
 8000ea6:	02db      	lsls	r3, r3, #11
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d10e      	bne.n	8000eca <HAL_RCC_OscConfig+0xae>
 8000eac:	4bb0      	ldr	r3, [pc, #704]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4baf      	ldr	r3, [pc, #700]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	02c9      	lsls	r1, r1, #11
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	4bad      	ldr	r3, [pc, #692]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4bac      	ldr	r3, [pc, #688]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	0249      	lsls	r1, r1, #9
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e012      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000eca:	4ba9      	ldr	r3, [pc, #676]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4ba8      	ldr	r3, [pc, #672]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ed0:	49a8      	ldr	r1, [pc, #672]	; (8001174 <HAL_RCC_OscConfig+0x358>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	4ba6      	ldr	r3, [pc, #664]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	025b      	lsls	r3, r3, #9
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4ba2      	ldr	r3, [pc, #648]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4ba1      	ldr	r3, [pc, #644]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000eea:	49a3      	ldr	r1, [pc, #652]	; (8001178 <HAL_RCC_OscConfig+0x35c>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d015      	beq.n	8000f24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fd2a 	bl	8000950 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f00:	e009      	b.n	8000f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f02:	f7ff fd25 	bl	8000950 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b64      	cmp	r3, #100	; 0x64
 8000f0e:	d902      	bls.n	8000f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	f000 fb3c 	bl	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f16:	4b96      	ldr	r3, [pc, #600]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d0ef      	beq.n	8000f02 <HAL_RCC_OscConfig+0xe6>
 8000f22:	e015      	b.n	8000f50 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fd14 	bl	8000950 <HAL_GetTick>
 8000f28:	0003      	movs	r3, r0
 8000f2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fd0f 	bl	8000950 <HAL_GetTick>
 8000f32:	0002      	movs	r2, r0
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b64      	cmp	r3, #100	; 0x64
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e326      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f40:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	029b      	lsls	r3, r3, #10
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d1f0      	bne.n	8000f2e <HAL_RCC_OscConfig+0x112>
 8000f4c:	e000      	b.n	8000f50 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2202      	movs	r2, #2
 8000f56:	4013      	ands	r3, r2
 8000f58:	d100      	bne.n	8000f5c <HAL_RCC_OscConfig+0x140>
 8000f5a:	e08b      	b.n	8001074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	2b0c      	cmp	r3, #12
 8000f6c:	d13e      	bne.n	8000fec <HAL_RCC_OscConfig+0x1d0>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d13b      	bne.n	8000fec <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f74:	4b7e      	ldr	r3, [pc, #504]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d004      	beq.n	8000f88 <HAL_RCC_OscConfig+0x16c>
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e302      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b79      	ldr	r3, [pc, #484]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a7b      	ldr	r2, [pc, #492]	; (800117c <HAL_RCC_OscConfig+0x360>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	021a      	lsls	r2, r3, #8
 8000f98:	4b75      	ldr	r3, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f9e:	4b74      	ldr	r3, [pc, #464]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2209      	movs	r2, #9
 8000fa4:	4393      	bics	r3, r2
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	4b71      	ldr	r3, [pc, #452]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fb0:	f000 fc40 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 8000fb4:	0001      	movs	r1, r0
 8000fb6:	4b6e      	ldr	r3, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	4a6f      	ldr	r2, [pc, #444]	; (8001180 <HAL_RCC_OscConfig+0x364>)
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	40da      	lsrs	r2, r3
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	; (8001184 <HAL_RCC_OscConfig+0x368>)
 8000fca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000fcc:	4b6e      	ldr	r3, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x36c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2513      	movs	r5, #19
 8000fd2:	197c      	adds	r4, r7, r5
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff fbcb 	bl	8000770 <HAL_InitTick>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000fde:	197b      	adds	r3, r7, r5
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d046      	beq.n	8001074 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000fe6:	197b      	adds	r3, r7, r5
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	e2d0      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d027      	beq.n	8001042 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2209      	movs	r2, #9
 8000ff8:	4393      	bics	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fca4 	bl	8000950 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fc9f 	bl	8000950 <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e2b6      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2204      	movs	r2, #4
 8001026:	4013      	ands	r3, r2
 8001028:	d0f1      	beq.n	800100e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102a:	4b51      	ldr	r3, [pc, #324]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a53      	ldr	r2, [pc, #332]	; (800117c <HAL_RCC_OscConfig+0x360>)
 8001030:	4013      	ands	r3, r2
 8001032:	0019      	movs	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	021a      	lsls	r2, r3, #8
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 800103c:	430a      	orrs	r2, r1
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	e018      	b.n	8001074 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001042:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001048:	2101      	movs	r1, #1
 800104a:	438a      	bics	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fc7f 	bl	8000950 <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fc7a 	bl	8000950 <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e291      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2204      	movs	r2, #4
 8001070:	4013      	ands	r3, r2
 8001072:	d1f1      	bne.n	8001058 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2210      	movs	r2, #16
 800107a:	4013      	ands	r3, r2
 800107c:	d100      	bne.n	8001080 <HAL_RCC_OscConfig+0x264>
 800107e:	e0a1      	b.n	80011c4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d140      	bne.n	8001108 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4013      	ands	r3, r2
 8001090:	d005      	beq.n	800109e <HAL_RCC_OscConfig+0x282>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e277      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	4a3a      	ldr	r2, [pc, #232]	; (800118c <HAL_RCC_OscConfig+0x370>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	0019      	movs	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 80010ae:	430a      	orrs	r2, r1
 80010b0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	0a19      	lsrs	r1, r3, #8
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	061a      	lsls	r2, r3, #24
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 80010c2:	430a      	orrs	r2, r1
 80010c4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	0b5b      	lsrs	r3, r3, #13
 80010cc:	3301      	adds	r3, #1
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	0212      	lsls	r2, r2, #8
 80010d2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	210f      	movs	r1, #15
 80010dc:	400b      	ands	r3, r1
 80010de:	4928      	ldr	r1, [pc, #160]	; (8001180 <HAL_RCC_OscConfig+0x364>)
 80010e0:	5ccb      	ldrb	r3, [r1, r3]
 80010e2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x368>)
 80010e6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_RCC_OscConfig+0x36c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2513      	movs	r5, #19
 80010ee:	197c      	adds	r4, r7, r5
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fb3d 	bl	8000770 <HAL_InitTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010fa:	197b      	adds	r3, r7, r5
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d060      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001102:	197b      	adds	r3, r7, r5
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	e242      	b.n	800158e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d03f      	beq.n	8001190 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0049      	lsls	r1, r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fc17 	bl	8000950 <HAL_GetTick>
 8001122:	0003      	movs	r3, r0
 8001124:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001128:	f7ff fc12 	bl	8000950 <HAL_GetTick>
 800112c:	0002      	movs	r2, r0
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e229      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4013      	ands	r3, r2
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_RCC_OscConfig+0x370>)
 800114c:	4013      	ands	r3, r2
 800114e:	0019      	movs	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 8001156:	430a      	orrs	r2, r1
 8001158:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	0a19      	lsrs	r1, r3, #8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	061a      	lsls	r2, r3, #24
 8001168:	4b01      	ldr	r3, [pc, #4]	; (8001170 <HAL_RCC_OscConfig+0x354>)
 800116a:	430a      	orrs	r2, r1
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	e029      	b.n	80011c4 <HAL_RCC_OscConfig+0x3a8>
 8001170:	40021000 	.word	0x40021000
 8001174:	fffeffff 	.word	0xfffeffff
 8001178:	fffbffff 	.word	0xfffbffff
 800117c:	ffffe0ff 	.word	0xffffe0ff
 8001180:	0800323c 	.word	0x0800323c
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004
 800118c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001190:	4bbd      	ldr	r3, [pc, #756]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4bbc      	ldr	r3, [pc, #752]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001196:	49bd      	ldr	r1, [pc, #756]	; (800148c <HAL_RCC_OscConfig+0x670>)
 8001198:	400a      	ands	r2, r1
 800119a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fbd8 	bl	8000950 <HAL_GetTick>
 80011a0:	0003      	movs	r3, r0
 80011a2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a6:	f7ff fbd3 	bl	8000950 <HAL_GetTick>
 80011aa:	0002      	movs	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1ea      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011b8:	4bb3      	ldr	r3, [pc, #716]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2208      	movs	r2, #8
 80011ca:	4013      	ands	r3, r2
 80011cc:	d036      	beq.n	800123c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d019      	beq.n	800120a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d6:	4bac      	ldr	r3, [pc, #688]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80011d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80011dc:	2101      	movs	r1, #1
 80011de:	430a      	orrs	r2, r1
 80011e0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fbb5 	bl	8000950 <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fbb0 	bl	8000950 <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1c7      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011fe:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001202:	2202      	movs	r2, #2
 8001204:	4013      	ands	r3, r2
 8001206:	d0f1      	beq.n	80011ec <HAL_RCC_OscConfig+0x3d0>
 8001208:	e018      	b.n	800123c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120a:	4b9f      	ldr	r3, [pc, #636]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800120c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800120e:	4b9e      	ldr	r3, [pc, #632]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001210:	2101      	movs	r1, #1
 8001212:	438a      	bics	r2, r1
 8001214:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fb9b 	bl	8000950 <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fb96 	bl	8000950 <HAL_GetTick>
 8001224:	0002      	movs	r2, r0
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1ad      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001232:	4b95      	ldr	r3, [pc, #596]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001236:	2202      	movs	r2, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d1f1      	bne.n	8001220 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2204      	movs	r2, #4
 8001242:	4013      	ands	r3, r2
 8001244:	d100      	bne.n	8001248 <HAL_RCC_OscConfig+0x42c>
 8001246:	e0ae      	b.n	80013a6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001248:	2027      	movs	r0, #39	; 0x27
 800124a:	183b      	adds	r3, r7, r0
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001250:	4b8d      	ldr	r3, [pc, #564]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	4013      	ands	r3, r2
 800125a:	d109      	bne.n	8001270 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4b8a      	ldr	r3, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800125e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001260:	4b89      	ldr	r3, [pc, #548]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001262:	2180      	movs	r1, #128	; 0x80
 8001264:	0549      	lsls	r1, r1, #21
 8001266:	430a      	orrs	r2, r1
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800126a:	183b      	adds	r3, r7, r0
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001270:	4b87      	ldr	r3, [pc, #540]	; (8001490 <HAL_RCC_OscConfig+0x674>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4013      	ands	r3, r2
 800127a:	d11a      	bne.n	80012b2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127c:	4b84      	ldr	r3, [pc, #528]	; (8001490 <HAL_RCC_OscConfig+0x674>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b83      	ldr	r3, [pc, #524]	; (8001490 <HAL_RCC_OscConfig+0x674>)
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	0049      	lsls	r1, r1, #1
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128a:	f7ff fb61 	bl	8000950 <HAL_GetTick>
 800128e:	0003      	movs	r3, r0
 8001290:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001294:	f7ff fb5c 	bl	8000950 <HAL_GetTick>
 8001298:	0002      	movs	r2, r0
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e173      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a6:	4b7a      	ldr	r3, [pc, #488]	; (8001490 <HAL_RCC_OscConfig+0x674>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_OscConfig+0x4b2>
 80012be:	4b72      	ldr	r3, [pc, #456]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80012c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012c2:	4b71      	ldr	r3, [pc, #452]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0049      	lsls	r1, r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	651a      	str	r2, [r3, #80]	; 0x50
 80012cc:	e031      	b.n	8001332 <HAL_RCC_OscConfig+0x516>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x4d4>
 80012d6:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80012d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012da:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80012dc:	496b      	ldr	r1, [pc, #428]	; (800148c <HAL_RCC_OscConfig+0x670>)
 80012de:	400a      	ands	r2, r1
 80012e0:	651a      	str	r2, [r3, #80]	; 0x50
 80012e2:	4b69      	ldr	r3, [pc, #420]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80012e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e6:	4b68      	ldr	r3, [pc, #416]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80012e8:	496a      	ldr	r1, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x678>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	651a      	str	r2, [r3, #80]	; 0x50
 80012ee:	e020      	b.n	8001332 <HAL_RCC_OscConfig+0x516>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	23a0      	movs	r3, #160	; 0xa0
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10e      	bne.n	800131a <HAL_RCC_OscConfig+0x4fe>
 80012fc:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80012fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001300:	4b61      	ldr	r3, [pc, #388]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	00c9      	lsls	r1, r1, #3
 8001306:	430a      	orrs	r2, r1
 8001308:	651a      	str	r2, [r3, #80]	; 0x50
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800130c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800130e:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0049      	lsls	r1, r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	651a      	str	r2, [r3, #80]	; 0x50
 8001318:	e00b      	b.n	8001332 <HAL_RCC_OscConfig+0x516>
 800131a:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800131c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800131e:	4b5a      	ldr	r3, [pc, #360]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001320:	495a      	ldr	r1, [pc, #360]	; (800148c <HAL_RCC_OscConfig+0x670>)
 8001322:	400a      	ands	r2, r1
 8001324:	651a      	str	r2, [r3, #80]	; 0x50
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800132a:	4b57      	ldr	r3, [pc, #348]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800132c:	4959      	ldr	r1, [pc, #356]	; (8001494 <HAL_RCC_OscConfig+0x678>)
 800132e:	400a      	ands	r2, r1
 8001330:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d015      	beq.n	8001366 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fb09 	bl	8000950 <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001342:	e009      	b.n	8001358 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001344:	f7ff fb04 	bl	8000950 <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4a52      	ldr	r2, [pc, #328]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e11a      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800135a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d0ef      	beq.n	8001344 <HAL_RCC_OscConfig+0x528>
 8001364:	e014      	b.n	8001390 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff faf3 	bl	8000950 <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800136e:	e009      	b.n	8001384 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001370:	f7ff faee 	bl	8000950 <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	4a47      	ldr	r2, [pc, #284]	; (8001498 <HAL_RCC_OscConfig+0x67c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e104      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4013      	ands	r3, r2
 800138e:	d1ef      	bne.n	8001370 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001390:	2327      	movs	r3, #39	; 0x27
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800139c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80013a0:	493e      	ldr	r1, [pc, #248]	; (800149c <HAL_RCC_OscConfig+0x680>)
 80013a2:	400a      	ands	r2, r1
 80013a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2220      	movs	r2, #32
 80013ac:	4013      	ands	r3, r2
 80013ae:	d049      	beq.n	8001444 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d026      	beq.n	8001406 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80013be:	2101      	movs	r1, #1
 80013c0:	430a      	orrs	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80013c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	0189      	lsls	r1, r1, #6
 80013da:	430a      	orrs	r2, r1
 80013dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fab7 	bl	8000950 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e8:	f7ff fab2 	bl	8000950 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0c9      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d0f1      	beq.n	80013e8 <HAL_RCC_OscConfig+0x5cc>
 8001404:	e01e      	b.n	8001444 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800140c:	2101      	movs	r1, #1
 800140e:	438a      	bics	r2, r1
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_RCC_OscConfig+0x684>)
 8001418:	4922      	ldr	r1, [pc, #136]	; (80014a4 <HAL_RCC_OscConfig+0x688>)
 800141a:	400a      	ands	r2, r1
 800141c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fa97 	bl	8000950 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001428:	f7ff fa92 	bl	8000950 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0a9      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2202      	movs	r2, #2
 8001440:	4013      	ands	r3, r2
 8001442:	d1f1      	bne.n	8001428 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	2b00      	cmp	r3, #0
 800144a:	d100      	bne.n	800144e <HAL_RCC_OscConfig+0x632>
 800144c:	e09e      	b.n	800158c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x63a>
 8001454:	e077      	b.n	8001546 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	2b02      	cmp	r3, #2
 800145c:	d158      	bne.n	8001510 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_RCC_OscConfig+0x66c>)
 8001464:	4910      	ldr	r1, [pc, #64]	; (80014a8 <HAL_RCC_OscConfig+0x68c>)
 8001466:	400a      	ands	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fa71 	bl	8000950 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fa6c 	bl	8000950 <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d914      	bls.n	80014ac <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e083      	b.n	800158e <HAL_RCC_OscConfig+0x772>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	40021000 	.word	0x40021000
 800148c:	fffffeff 	.word	0xfffffeff
 8001490:	40007000 	.word	0x40007000
 8001494:	fffffbff 	.word	0xfffffbff
 8001498:	00001388 	.word	0x00001388
 800149c:	efffffff 	.word	0xefffffff
 80014a0:	40010000 	.word	0x40010000
 80014a4:	ffffdfff 	.word	0xffffdfff
 80014a8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	049b      	lsls	r3, r3, #18
 80014b4:	4013      	ands	r3, r2
 80014b6:	d1dd      	bne.n	8001474 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a37      	ldr	r2, [pc, #220]	; (800159c <HAL_RCC_OscConfig+0x780>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	431a      	orrs	r2, r3
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d8:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	0449      	lsls	r1, r1, #17
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fa33 	bl	8000950 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fa2e 	bl	8000950 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e045      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	049b      	lsls	r3, r3, #18
 800150a:	4013      	ands	r3, r2
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x6d4>
 800150e:	e03d      	b.n	800158c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 8001516:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_RCC_OscConfig+0x784>)
 8001518:	400a      	ands	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fa18 	bl	8000950 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fa13 	bl	8000950 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e02a      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	049b      	lsls	r3, r3, #18
 8001540:	4013      	ands	r3, r2
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x70a>
 8001544:	e022      	b.n	800158c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e01d      	b.n	800158e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_RCC_OscConfig+0x77c>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	401a      	ands	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	429a      	cmp	r2, r3
 8001566:	d10f      	bne.n	8001588 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	23f0      	movs	r3, #240	; 0xf0
 800156c:	039b      	lsls	r3, r3, #14
 800156e:	401a      	ands	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	401a      	ands	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b00a      	add	sp, #40	; 0x28
 8001594:	bdb0      	pop	{r4, r5, r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40021000 	.word	0x40021000
 800159c:	ff02ffff 	.word	0xff02ffff
 80015a0:	feffffff 	.word	0xfeffffff

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e128      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b96      	ldr	r3, [pc, #600]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	4013      	ands	r3, r2
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d91e      	bls.n	8001604 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b93      	ldr	r3, [pc, #588]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	4393      	bics	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	4b90      	ldr	r3, [pc, #576]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015d8:	f7ff f9ba 	bl	8000950 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e2:	f7ff f9b5 	bl	8000950 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4a8a      	ldr	r2, [pc, #552]	; (8001818 <HAL_RCC_ClockConfig+0x274>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e109      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b87      	ldr	r3, [pc, #540]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2201      	movs	r2, #1
 80015fc:	4013      	ands	r3, r2
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d1ee      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160e:	4b83      	ldr	r3, [pc, #524]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	22f0      	movs	r2, #240	; 0xf0
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	4b7f      	ldr	r3, [pc, #508]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2201      	movs	r2, #1
 8001628:	4013      	ands	r3, r2
 800162a:	d100      	bne.n	800162e <HAL_RCC_ClockConfig+0x8a>
 800162c:	e089      	b.n	8001742 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001636:	4b79      	ldr	r3, [pc, #484]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d120      	bne.n	8001684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0e1      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	049b      	lsls	r3, r3, #18
 8001656:	4013      	ands	r3, r2
 8001658:	d114      	bne.n	8001684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0d5      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d106      	bne.n	8001674 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001666:	4b6d      	ldr	r3, [pc, #436]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d109      	bne.n	8001684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0ca      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001674:	4b69      	ldr	r3, [pc, #420]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0c2      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001684:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2203      	movs	r2, #3
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4b62      	ldr	r3, [pc, #392]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001694:	430a      	orrs	r2, r1
 8001696:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001698:	f7ff f95a 	bl	8000950 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d111      	bne.n	80016cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a8:	e009      	b.n	80016be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016aa:	f7ff f951 	bl	8000950 <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_RCC_ClockConfig+0x274>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0a5      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	220c      	movs	r2, #12
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d1ef      	bne.n	80016aa <HAL_RCC_ClockConfig+0x106>
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d111      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	e009      	b.n	80016ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d6:	f7ff f93b 	bl	8000950 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <HAL_RCC_ClockConfig+0x274>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e08f      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ea:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	220c      	movs	r2, #12
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d1ef      	bne.n	80016d6 <HAL_RCC_ClockConfig+0x132>
 80016f6:	e024      	b.n	8001742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d11b      	bne.n	8001738 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001700:	e009      	b.n	8001716 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001702:	f7ff f925 	bl	8000950 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a42      	ldr	r2, [pc, #264]	; (8001818 <HAL_RCC_ClockConfig+0x274>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e079      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	4013      	ands	r3, r2
 800171e:	2b04      	cmp	r3, #4
 8001720:	d1ef      	bne.n	8001702 <HAL_RCC_ClockConfig+0x15e>
 8001722:	e00e      	b.n	8001742 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff f914 	bl	8000950 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <HAL_RCC_ClockConfig+0x274>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e068      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	220c      	movs	r2, #12
 800173e:	4013      	ands	r3, r2
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d21e      	bcs.n	800178e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4393      	bics	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001762:	f7ff f8f5 	bl	8000950 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	e009      	b.n	8001780 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff f8f0 	bl	8000950 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_RCC_ClockConfig+0x274>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e044      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_ClockConfig+0x270>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d1ee      	bne.n	800176c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	d009      	beq.n	80017ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <HAL_RCC_ClockConfig+0x27c>)
 800179e:	4013      	ands	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	4013      	ands	r3, r2
 80017b4:	d00a      	beq.n	80017cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <HAL_RCC_ClockConfig+0x280>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	00da      	lsls	r2, r3, #3
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017cc:	f000 f832 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017d0:	0001      	movs	r1, r0
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x278>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	220f      	movs	r2, #15
 80017da:	4013      	ands	r3, r2
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x284>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	000a      	movs	r2, r1
 80017e2:	40da      	lsrs	r2, r3
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_RCC_ClockConfig+0x288>)
 80017e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_RCC_ClockConfig+0x28c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	250b      	movs	r5, #11
 80017ee:	197c      	adds	r4, r7, r5
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7fe ffbd 	bl	8000770 <HAL_InitTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017fa:	197b      	adds	r3, r7, r5
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001802:	197b      	adds	r3, r7, r5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	e000      	b.n	800180a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b004      	add	sp, #16
 8001810:	bdb0      	pop	{r4, r5, r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40022000 	.word	0x40022000
 8001818:	00001388 	.word	0x00001388
 800181c:	40021000 	.word	0x40021000
 8001820:	fffff8ff 	.word	0xfffff8ff
 8001824:	ffffc7ff 	.word	0xffffc7ff
 8001828:	0800323c 	.word	0x0800323c
 800182c:	20000000 	.word	0x20000000
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	b5b0      	push	{r4, r5, r7, lr}
 8001836:	b08e      	sub	sp, #56	; 0x38
 8001838:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800183a:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_RCC_GetSysClockFreq+0x138>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001842:	230c      	movs	r3, #12
 8001844:	4013      	ands	r3, r2
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d014      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x40>
 800184a:	d900      	bls.n	800184e <HAL_RCC_GetSysClockFreq+0x1a>
 800184c:	e07b      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x112>
 800184e:	2b04      	cmp	r3, #4
 8001850:	d002      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x24>
 8001852:	2b08      	cmp	r3, #8
 8001854:	d00b      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x3a>
 8001856:	e076      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001858:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_RCC_GetSysClockFreq+0x138>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2210      	movs	r2, #16
 800185e:	4013      	ands	r3, r2
 8001860:	d002      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001866:	e07c      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001868:	4b42      	ldr	r3, [pc, #264]	; (8001974 <HAL_RCC_GetSysClockFreq+0x140>)
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800186c:	e079      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <HAL_RCC_GetSysClockFreq+0x144>)
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001872:	e076      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	0c9a      	lsrs	r2, r3, #18
 8001878:	230f      	movs	r3, #15
 800187a:	401a      	ands	r2, r3
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_GetSysClockFreq+0x148>)
 800187e:	5c9b      	ldrb	r3, [r3, r2]
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001884:	0d9a      	lsrs	r2, r3, #22
 8001886:	2303      	movs	r3, #3
 8001888:	4013      	ands	r3, r2
 800188a:	3301      	adds	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_GetSysClockFreq+0x138>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	025b      	lsls	r3, r3, #9
 8001896:	4013      	ands	r3, r2
 8001898:	d01a      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	4a35      	ldr	r2, [pc, #212]	; (8001978 <HAL_RCC_GetSysClockFreq+0x144>)
 80018a4:	2300      	movs	r3, #0
 80018a6:	69b8      	ldr	r0, [r7, #24]
 80018a8:	69f9      	ldr	r1, [r7, #28]
 80018aa:	f7fe fcd9 	bl	8000260 <__aeabi_lmul>
 80018ae:	0002      	movs	r2, r0
 80018b0:	000b      	movs	r3, r1
 80018b2:	0010      	movs	r0, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f7fe fcad 	bl	8000220 <__aeabi_uldivmod>
 80018c6:	0002      	movs	r2, r0
 80018c8:	000b      	movs	r3, r1
 80018ca:	0013      	movs	r3, r2
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
 80018ce:	e037      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_GetSysClockFreq+0x138>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d01a      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018e4:	2300      	movs	r3, #0
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	f7fe fcb9 	bl	8000260 <__aeabi_lmul>
 80018ee:	0002      	movs	r2, r0
 80018f0:	000b      	movs	r3, r1
 80018f2:	0010      	movs	r0, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f7fe fc8d 	bl	8000220 <__aeabi_uldivmod>
 8001906:	0002      	movs	r2, r0
 8001908:	000b      	movs	r3, r1
 800190a:	0013      	movs	r3, r2
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
 800190e:	e017      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001912:	0018      	movs	r0, r3
 8001914:	2300      	movs	r3, #0
 8001916:	0019      	movs	r1, r3
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <HAL_RCC_GetSysClockFreq+0x140>)
 800191a:	2300      	movs	r3, #0
 800191c:	f7fe fca0 	bl	8000260 <__aeabi_lmul>
 8001920:	0002      	movs	r2, r0
 8001922:	000b      	movs	r3, r1
 8001924:	0010      	movs	r0, r2
 8001926:	0019      	movs	r1, r3
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	001c      	movs	r4, r3
 800192c:	2300      	movs	r3, #0
 800192e:	001d      	movs	r5, r3
 8001930:	0022      	movs	r2, r4
 8001932:	002b      	movs	r3, r5
 8001934:	f7fe fc74 	bl	8000220 <__aeabi_uldivmod>
 8001938:	0002      	movs	r2, r0
 800193a:	000b      	movs	r3, r1
 800193c:	0013      	movs	r3, r2
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001944:	e00d      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_GetSysClockFreq+0x138>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0b5b      	lsrs	r3, r3, #13
 800194c:	2207      	movs	r2, #7
 800194e:	4013      	ands	r3, r2
 8001950:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	3301      	adds	r3, #1
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	0212      	lsls	r2, r2, #8
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001960:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b00e      	add	sp, #56	; 0x38
 800196a:	bdb0      	pop	{r4, r5, r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	003d0900 	.word	0x003d0900
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200
 800197c:	08003254 	.word	0x08003254

08001980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <HAL_RCC_GetHCLKFreq+0x10>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	20000000 	.word	0x20000000

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001998:	f7ff fff2 	bl	8001980 <HAL_RCC_GetHCLKFreq>
 800199c:	0001      	movs	r1, r0
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	2207      	movs	r2, #7
 80019a6:	4013      	ands	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	40d9      	lsrs	r1, r3
 80019ae:	000b      	movs	r3, r1
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	40021000 	.word	0x40021000
 80019bc:	0800324c 	.word	0x0800324c

080019c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	220f      	movs	r2, #15
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2203      	movs	r2, #3
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	22f0      	movs	r2, #240	; 0xf0
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	23e0      	movs	r3, #224	; 0xe0
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_GetClockConfig+0x5c>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	08da      	lsrs	r2, r3, #3
 80019fc:	23e0      	movs	r3, #224	; 0xe0
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_GetClockConfig+0x60>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40022000 	.word	0x40022000

08001a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e032      	b.n	8001a9c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2239      	movs	r2, #57	; 0x39
 8001a3a:	5c9b      	ldrb	r3, [r3, r2]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2238      	movs	r2, #56	; 0x38
 8001a46:	2100      	movs	r1, #0
 8001a48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 f829 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2239      	movs	r2, #57	; 0x39
 8001a56:	2102      	movs	r1, #2
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3304      	adds	r3, #4
 8001a62:	0019      	movs	r1, r3
 8001a64:	0010      	movs	r0, r2
 8001a66:	f000 f979 	bl	8001d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	223e      	movs	r2, #62	; 0x3e
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	223a      	movs	r2, #58	; 0x3a
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223b      	movs	r2, #59	; 0x3b
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	223c      	movs	r2, #60	; 0x3c
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	223d      	movs	r2, #61	; 0x3d
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2239      	movs	r2, #57	; 0x39
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2239      	movs	r2, #57	; 0x39
 8001ac0:	5c9b      	ldrb	r3, [r3, r2]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d001      	beq.n	8001acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e036      	b.n	8001b3a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2239      	movs	r2, #57	; 0x39
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2101      	movs	r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	05db      	lsls	r3, r3, #23
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d009      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x50>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_TIM_Base_Start_IT+0x90>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d004      	beq.n	8001b04 <HAL_TIM_Base_Start_IT+0x50>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_TIM_Base_Start_IT+0x94>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d111      	bne.n	8001b28 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d010      	beq.n	8001b38 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b26:	e007      	b.n	8001b38 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40011400 	.word	0x40011400

08001b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d124      	bne.n	8001bac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d11d      	bne.n	8001bac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2203      	movs	r2, #3
 8001b76:	4252      	negs	r2, r2
 8001b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2203      	movs	r2, #3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d004      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 f8cc 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 8001b94:	e007      	b.n	8001ba6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 f8bf 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 f8cb 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d125      	bne.n	8001c06 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d11e      	bne.n	8001c06 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2205      	movs	r2, #5
 8001bce:	4252      	negs	r2, r2
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	23c0      	movs	r3, #192	; 0xc0
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d004      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f89f 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 8001bee:	e007      	b.n	8001c00 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f892 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f89e 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d124      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d11d      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2209      	movs	r2, #9
 8001c28:	4252      	negs	r2, r2
 8001c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 f873 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 8001c46:	e007      	b.n	8001c58 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 f866 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 f872 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2210      	movs	r2, #16
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d125      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2210      	movs	r2, #16
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d11e      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2211      	movs	r2, #17
 8001c80:	4252      	negs	r2, r2
 8001c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2208      	movs	r2, #8
 8001c88:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	23c0      	movs	r3, #192	; 0xc0
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d004      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 f846 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e007      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 f839 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f000 f845 	bl	8001d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10f      	bne.n	8001ce6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	4252      	negs	r2, r2
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe fd13 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d10f      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d108      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2241      	movs	r2, #65	; 0x41
 8001d08:	4252      	negs	r2, r2
 8001d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f81c 	bl	8001d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d007      	beq.n	8001d86 <TIM_Base_SetConfig+0x2a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <TIM_Base_SetConfig+0x9c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d003      	beq.n	8001d86 <TIM_Base_SetConfig+0x2a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <TIM_Base_SetConfig+0xa0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2270      	movs	r2, #112	; 0x70
 8001d8a:	4393      	bics	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	05db      	lsls	r3, r3, #23
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d007      	beq.n	8001db2 <TIM_Base_SetConfig+0x56>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <TIM_Base_SetConfig+0x9c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d003      	beq.n	8001db2 <TIM_Base_SetConfig+0x56>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <TIM_Base_SetConfig+0xa0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d108      	bne.n	8001dc4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <TIM_Base_SetConfig+0xa4>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	4393      	bics	r3, r2
 8001dca:	001a      	movs	r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	615a      	str	r2, [r3, #20]
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40011400 	.word	0x40011400
 8001e00:	fffffcff 	.word	0xfffffcff

08001e04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	1dbb      	adds	r3, r7, #6
 8001e0e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e14:	1dbb      	adds	r3, r7, #6
 8001e16:	2200      	movs	r2, #0
 8001e18:	5e9b      	ldrsh	r3, [r3, r2]
 8001e1a:	2b84      	cmp	r3, #132	; 0x84
 8001e1c:	d006      	beq.n	8001e2c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8001e1e:	1dbb      	adds	r3, r7, #6
 8001e20:	2200      	movs	r2, #0
 8001e22:	5e9a      	ldrsh	r2, [r3, r2]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	18d3      	adds	r3, r2, r3
 8001e28:	3303      	adds	r3, #3
 8001e2a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e3a:	f000 fac1 	bl	80023c0 <vTaskStartScheduler>
  
  return osOK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e48:	b089      	sub	sp, #36	; 0x24
 8001e4a:	af04      	add	r7, sp, #16
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <osThreadCreate+0x54>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01c      	beq.n	8001e9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685c      	ldr	r4, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681d      	ldr	r5, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691e      	ldr	r6, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2208      	movs	r2, #8
 8001e70:	5e9b      	ldrsh	r3, [r3, r2]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7ff ffc6 	bl	8001e04 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	9000      	str	r0, [sp, #0]
 8001e88:	000b      	movs	r3, r1
 8001e8a:	0032      	movs	r2, r6
 8001e8c:	0029      	movs	r1, r5
 8001e8e:	0020      	movs	r0, r4
 8001e90:	f000 f8e3 	bl	800205a <xTaskCreateStatic>
 8001e94:	0003      	movs	r3, r0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e01d      	b.n	8001ed6 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685c      	ldr	r4, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ea6:	b29e      	uxth	r6, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2208      	movs	r2, #8
 8001eac:	5e9b      	ldrsh	r3, [r3, r2]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff ffa8 	bl	8001e04 <makeFreeRtosPriority>
 8001eb4:	0001      	movs	r1, r0
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	230c      	movs	r3, #12
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	9100      	str	r1, [sp, #0]
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	0032      	movs	r2, r6
 8001ec4:	0029      	movs	r1, r5
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	f000 f90b 	bl	80020e2 <xTaskCreate>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b005      	add	sp, #20
 8001ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ee0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <osDelay+0x16>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	e000      	b.n	8001ef8 <osDelay+0x18>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fa3b 	bl	8002374 <vTaskDelay>
  
  return osOK;
 8001efe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b004      	add	sp, #16
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3308      	adds	r3, #8
 8001f14:	001a      	movs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4252      	negs	r2, r2
 8001f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3308      	adds	r3, #8
 8001f26:	001a      	movs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3308      	adds	r3, #8
 8001f30:	001a      	movs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	d103      	bne.n	8001fbc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e00c      	b.n	8001fd6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e002      	b.n	8001fca <vListInsert+0x2c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d2f6      	bcs.n	8001fc4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}

0800200a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6892      	ldr	r2, [r2, #8]
 8002020:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6852      	ldr	r2, [r2, #4]
 800202a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d103      	bne.n	800203e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bd80      	pop	{r7, pc}

0800205a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800205a:	b590      	push	{r4, r7, lr}
 800205c:	b08d      	sub	sp, #52	; 0x34
 800205e:	af04      	add	r7, sp, #16
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <xTaskCreateStatic+0x18>
 800206e:	b672      	cpsid	i
 8002070:	e7fe      	b.n	8002070 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <xTaskCreateStatic+0x22>
 8002078:	b672      	cpsid	i
 800207a:	e7fe      	b.n	800207a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800207c:	23b4      	movs	r3, #180	; 0xb4
 800207e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2bb4      	cmp	r3, #180	; 0xb4
 8002084:	d001      	beq.n	800208a <xTaskCreateStatic+0x30>
 8002086:	b672      	cpsid	i
 8002088:	e7fe      	b.n	8002088 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800208a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208e:	2b00      	cmp	r3, #0
 8002090:	d020      	beq.n	80020d4 <xTaskCreateStatic+0x7a>
 8002092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01d      	beq.n	80020d4 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	22b1      	movs	r2, #177	; 0xb1
 80020a6:	2102      	movs	r1, #2
 80020a8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80020aa:	683c      	ldr	r4, [r7, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	2300      	movs	r3, #0
 80020b4:	9303      	str	r3, [sp, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2318      	movs	r3, #24
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	0023      	movs	r3, r4
 80020c6:	f000 f859 	bl	800217c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f8ed 	bl	80022ac <prvAddNewTaskToReadyList>
 80020d2:	e001      	b.n	80020d8 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80020d8:	69bb      	ldr	r3, [r7, #24]
	}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b009      	add	sp, #36	; 0x24
 80020e0:	bd90      	pop	{r4, r7, pc}

080020e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80020e2:	b590      	push	{r4, r7, lr}
 80020e4:	b08d      	sub	sp, #52	; 0x34
 80020e6:	af04      	add	r7, sp, #16
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	1dbb      	adds	r3, r7, #6
 80020f0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 fdb1 	bl	8002c60 <pvPortMalloc>
 80020fe:	0003      	movs	r3, r0
 8002100:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d010      	beq.n	800212a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002108:	20b4      	movs	r0, #180	; 0xb4
 800210a:	f000 fda9 	bl	8002c60 <pvPortMalloc>
 800210e:	0003      	movs	r3, r0
 8002110:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	e006      	b.n	800212e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fe42 	bl	8002dac <vPortFree>
 8002128:	e001      	b.n	800212e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01a      	beq.n	800216a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	22b1      	movs	r2, #177	; 0xb1
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	683c      	ldr	r4, [r7, #0]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	9303      	str	r3, [sp, #12]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	0023      	movs	r3, r4
 8002158:	f000 f810 	bl	800217c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 f8a4 	bl	80022ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002164:	2301      	movs	r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	e002      	b.n	8002170 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800216a:	2301      	movs	r3, #1
 800216c:	425b      	negs	r3, r3
 800216e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002170:	69bb      	ldr	r3, [r7, #24]
	}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b009      	add	sp, #36	; 0x24
 8002178:	bd90      	pop	{r4, r7, pc}
	...

0800217c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4942      	ldr	r1, [pc, #264]	; (800229c <prvInitialiseNewTask+0x120>)
 8002192:	468c      	mov	ip, r1
 8002194:	4463      	add	r3, ip
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	18d3      	adds	r3, r2, r3
 800219a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2207      	movs	r2, #7
 80021a0:	4393      	bics	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2207      	movs	r2, #7
 80021a8:	4013      	ands	r3, r2
 80021aa:	d001      	beq.n	80021b0 <prvInitialiseNewTask+0x34>
 80021ac:	b672      	cpsid	i
 80021ae:	e7fe      	b.n	80021ae <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d020      	beq.n	80021f8 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e013      	b.n	80021e4 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	7818      	ldrb	r0, [r3, #0]
 80021c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c6:	2134      	movs	r1, #52	; 0x34
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	18d3      	adds	r3, r2, r3
 80021cc:	185b      	adds	r3, r3, r1
 80021ce:	1c02      	adds	r2, r0, #0
 80021d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	18d3      	adds	r3, r2, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	d9e8      	bls.n	80021bc <prvInitialiseNewTask+0x40>
 80021ea:	e000      	b.n	80021ee <prvInitialiseNewTask+0x72>
			{
				break;
 80021ec:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	2243      	movs	r2, #67	; 0x43
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]
 80021f6:	e003      	b.n	8002200 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	2234      	movs	r2, #52	; 0x34
 80021fc:	2100      	movs	r1, #0
 80021fe:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	2b06      	cmp	r3, #6
 8002204:	d901      	bls.n	800220a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002206:	2306      	movs	r3, #6
 8002208:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	6a3a      	ldr	r2, [r7, #32]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	2200      	movs	r2, #0
 800221a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	3304      	adds	r3, #4
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff fe8f 	bl	8001f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	3318      	adds	r3, #24
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff fe8a 	bl	8001f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002234:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	2207      	movs	r2, #7
 800223a:	1ad2      	subs	r2, r2, r3
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	22ac      	movs	r2, #172	; 0xac
 800224a:	2100      	movs	r1, #0
 800224c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	22b0      	movs	r2, #176	; 0xb0
 8002252:	2100      	movs	r1, #0
 8002254:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	334c      	adds	r3, #76	; 0x4c
 800225a:	2260      	movs	r2, #96	; 0x60
 800225c:	2100      	movs	r1, #0
 800225e:	0018      	movs	r0, r3
 8002260:	f000 feca 	bl	8002ff8 <memset>
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <prvInitialiseNewTask+0x124>)
 8002268:	651a      	str	r2, [r3, #80]	; 0x50
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <prvInitialiseNewTask+0x128>)
 800226e:	655a      	str	r2, [r3, #84]	; 0x54
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <prvInitialiseNewTask+0x12c>)
 8002274:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 fbbb 	bl	80029f8 <pxPortInitialiseStack>
 8002282:	0002      	movs	r2, r0
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002292:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b006      	add	sp, #24
 800229a:	bd80      	pop	{r7, pc}
 800229c:	3fffffff 	.word	0x3fffffff
 80022a0:	08003280 	.word	0x08003280
 80022a4:	080032a0 	.word	0x080032a0
 80022a8:	08003260 	.word	0x08003260

080022ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022b4:	f000 fc3c 	bl	8002b30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <prvAddNewTaskToReadyList+0xb0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	4b27      	ldr	r3, [pc, #156]	; (800235c <prvAddNewTaskToReadyList+0xb0>)
 80022c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80022c2:	4b27      	ldr	r3, [pc, #156]	; (8002360 <prvAddNewTaskToReadyList+0xb4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <prvAddNewTaskToReadyList+0xb4>)
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <prvAddNewTaskToReadyList+0xb0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d110      	bne.n	80022fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022d8:	f000 fa7c 	bl	80027d4 <prvInitialiseTaskLists>
 80022dc:	e00d      	b.n	80022fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <prvAddNewTaskToReadyList+0xb8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <prvAddNewTaskToReadyList+0xb4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d802      	bhi.n	80022fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <prvAddNewTaskToReadyList+0xb4>)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <prvAddNewTaskToReadyList+0xbc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <prvAddNewTaskToReadyList+0xbc>)
 8002302:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	4b18      	ldr	r3, [pc, #96]	; (800236c <prvAddNewTaskToReadyList+0xc0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d903      	bls.n	8002318 <prvAddNewTaskToReadyList+0x6c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <prvAddNewTaskToReadyList+0xc0>)
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	0013      	movs	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	189b      	adds	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <prvAddNewTaskToReadyList+0xc4>)
 8002326:	189a      	adds	r2, r3, r2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	0019      	movs	r1, r3
 800232e:	0010      	movs	r0, r2
 8002330:	f7ff fe13 	bl	8001f5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002334:	f000 fc0e 	bl	8002b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <prvAddNewTaskToReadyList+0xb8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <prvAddNewTaskToReadyList+0xb4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	429a      	cmp	r2, r3
 800234c:	d201      	bcs.n	8002352 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800234e:	f000 fbdf 	bl	8002b10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20000494 	.word	0x20000494
 8002360:	20000394 	.word	0x20000394
 8002364:	200004a0 	.word	0x200004a0
 8002368:	200004b0 	.word	0x200004b0
 800236c:	2000049c 	.word	0x2000049c
 8002370:	20000398 	.word	0x20000398

08002374 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d010      	beq.n	80023a8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <vTaskDelay+0x48>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <vTaskDelay+0x1e>
 800238e:	b672      	cpsid	i
 8002390:	e7fe      	b.n	8002390 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002392:	f000 f86d 	bl	8002470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2100      	movs	r1, #0
 800239a:	0018      	movs	r0, r3
 800239c:	f000 fad8 	bl	8002950 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023a0:	f000 f872 	bl	8002488 <xTaskResumeAll>
 80023a4:	0003      	movs	r3, r0
 80023a6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80023ae:	f000 fbaf 	bl	8002b10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	200004bc 	.word	0x200004bc

080023c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80023ce:	003a      	movs	r2, r7
 80023d0:	1d39      	adds	r1, r7, #4
 80023d2:	2308      	movs	r3, #8
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7fe f866 	bl	80004a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80023dc:	683c      	ldr	r4, [r7, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	491b      	ldr	r1, [pc, #108]	; (8002450 <vTaskStartScheduler+0x90>)
 80023e4:	481b      	ldr	r0, [pc, #108]	; (8002454 <vTaskStartScheduler+0x94>)
 80023e6:	9202      	str	r2, [sp, #8]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2300      	movs	r3, #0
 80023f0:	0022      	movs	r2, r4
 80023f2:	f7ff fe32 	bl	800205a <xTaskCreateStatic>
 80023f6:	0002      	movs	r2, r0
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <vTaskStartScheduler+0x98>)
 80023fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <vTaskStartScheduler+0x98>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002404:	2301      	movs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e001      	b.n	800240e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d113      	bne.n	800243c <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002414:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <vTaskStartScheduler+0x9c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	334c      	adds	r3, #76	; 0x4c
 800241c:	001a      	movs	r2, r3
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <vTaskStartScheduler+0xa0>)
 8002420:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <vTaskStartScheduler+0xa4>)
 8002424:	2201      	movs	r2, #1
 8002426:	4252      	negs	r2, r2
 8002428:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <vTaskStartScheduler+0xa8>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <vTaskStartScheduler+0xac>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002436:	f000 fb47 	bl	8002ac8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800243a:	e004      	b.n	8002446 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3301      	adds	r3, #1
 8002440:	d101      	bne.n	8002446 <vTaskStartScheduler+0x86>
 8002442:	b672      	cpsid	i
 8002444:	e7fe      	b.n	8002444 <vTaskStartScheduler+0x84>
}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b005      	add	sp, #20
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	08003234 	.word	0x08003234
 8002454:	080027b5 	.word	0x080027b5
 8002458:	200004b8 	.word	0x200004b8
 800245c:	20000394 	.word	0x20000394
 8002460:	20000010 	.word	0x20000010
 8002464:	200004b4 	.word	0x200004b4
 8002468:	200004a0 	.word	0x200004a0
 800246c:	20000498 	.word	0x20000498

08002470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <vTaskSuspendAll+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	4b02      	ldr	r3, [pc, #8]	; (8002484 <vTaskSuspendAll+0x14>)
 800247c:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200004bc 	.word	0x200004bc

08002488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002496:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <xTaskResumeAll+0xf8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <xTaskResumeAll+0x1a>
 800249e:	b672      	cpsid	i
 80024a0:	e7fe      	b.n	80024a0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024a2:	f000 fb45 	bl	8002b30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <xTaskResumeAll+0xf8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1e5a      	subs	r2, r3, #1
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <xTaskResumeAll+0xf8>)
 80024ae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <xTaskResumeAll+0xf8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d15b      	bne.n	8002570 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <xTaskResumeAll+0xfc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d057      	beq.n	8002570 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024c0:	e02f      	b.n	8002522 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c2:	4b31      	ldr	r3, [pc, #196]	; (8002588 <xTaskResumeAll+0x100>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3318      	adds	r3, #24
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff fd9b 	bl	800200a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3304      	adds	r3, #4
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff fd96 	bl	800200a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <xTaskResumeAll+0x104>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d903      	bls.n	80024f2 <xTaskResumeAll+0x6a>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <xTaskResumeAll+0x104>)
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f6:	0013      	movs	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	189b      	adds	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4a24      	ldr	r2, [pc, #144]	; (8002590 <xTaskResumeAll+0x108>)
 8002500:	189a      	adds	r2, r3, r2
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	0019      	movs	r1, r3
 8002508:	0010      	movs	r0, r2
 800250a:	f7ff fd26 	bl	8001f5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <xTaskResumeAll+0x10c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	429a      	cmp	r2, r3
 800251a:	d302      	bcc.n	8002522 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <xTaskResumeAll+0x110>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <xTaskResumeAll+0x100>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1cb      	bne.n	80024c2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002530:	f000 f9f0 	bl	8002914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <xTaskResumeAll+0x114>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002540:	f000 f82e 	bl	80025a0 <xTaskIncrementTick>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d002      	beq.n	800254e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <xTaskResumeAll+0x110>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3b01      	subs	r3, #1
 8002552:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f2      	bne.n	8002540 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <xTaskResumeAll+0x114>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <xTaskResumeAll+0x110>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002568:	2301      	movs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800256c:	f000 fad0 	bl	8002b10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002570:	f000 faf0 	bl	8002b54 <vPortExitCritical>

	return xAlreadyYielded;
 8002574:	68bb      	ldr	r3, [r7, #8]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	200004bc 	.word	0x200004bc
 8002584:	20000494 	.word	0x20000494
 8002588:	20000454 	.word	0x20000454
 800258c:	2000049c 	.word	0x2000049c
 8002590:	20000398 	.word	0x20000398
 8002594:	20000394 	.word	0x20000394
 8002598:	200004a8 	.word	0x200004a8
 800259c:	200004a4 	.word	0x200004a4

080025a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <xTaskIncrementTick+0x134>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d000      	beq.n	80025b4 <xTaskIncrementTick+0x14>
 80025b2:	e07e      	b.n	80026b2 <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <xTaskIncrementTick+0x138>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80025bc:	4b46      	ldr	r3, [pc, #280]	; (80026d8 <xTaskIncrementTick+0x138>)
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d117      	bne.n	80025f8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <xTaskIncrementTick+0x13c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <xTaskIncrementTick+0x36>
 80025d2:	b672      	cpsid	i
 80025d4:	e7fe      	b.n	80025d4 <xTaskIncrementTick+0x34>
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <xTaskIncrementTick+0x13c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <xTaskIncrementTick+0x140>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <xTaskIncrementTick+0x13c>)
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <xTaskIncrementTick+0x140>)
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <xTaskIncrementTick+0x144>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <xTaskIncrementTick+0x144>)
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f000 f98e 	bl	8002914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <xTaskIncrementTick+0x148>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d349      	bcc.n	8002696 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <xTaskIncrementTick+0x13c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d104      	bne.n	8002616 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <xTaskIncrementTick+0x148>)
 800260e:	2201      	movs	r2, #1
 8002610:	4252      	negs	r2, r2
 8002612:	601a      	str	r2, [r3, #0]
					break;
 8002614:	e03f      	b.n	8002696 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <xTaskIncrementTick+0x13c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d203      	bcs.n	8002636 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <xTaskIncrementTick+0x148>)
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002634:	e02f      	b.n	8002696 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3304      	adds	r3, #4
 800263a:	0018      	movs	r0, r3
 800263c:	f7ff fce5 	bl	800200a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	3318      	adds	r3, #24
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff fcdc 	bl	800200a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <xTaskIncrementTick+0x14c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d903      	bls.n	8002666 <xTaskIncrementTick+0xc6>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <xTaskIncrementTick+0x14c>)
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	0013      	movs	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	189b      	adds	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <xTaskIncrementTick+0x150>)
 8002674:	189a      	adds	r2, r3, r2
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3304      	adds	r3, #4
 800267a:	0019      	movs	r1, r3
 800267c:	0010      	movs	r0, r2
 800267e:	f7ff fc6c 	bl	8001f5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <xTaskIncrementTick+0x154>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	429a      	cmp	r2, r3
 800268e:	d3b8      	bcc.n	8002602 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002694:	e7b5      	b.n	8002602 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <xTaskIncrementTick+0x154>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	4914      	ldr	r1, [pc, #80]	; (80026f0 <xTaskIncrementTick+0x150>)
 800269e:	0013      	movs	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	585b      	ldr	r3, [r3, r1]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d907      	bls.n	80026bc <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e004      	b.n	80026bc <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <xTaskIncrementTick+0x158>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <xTaskIncrementTick+0x158>)
 80026ba:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <xTaskIncrementTick+0x15c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 80026c4:	2301      	movs	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80026c8:	697b      	ldr	r3, [r7, #20]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b006      	add	sp, #24
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	200004bc 	.word	0x200004bc
 80026d8:	20000498 	.word	0x20000498
 80026dc:	2000044c 	.word	0x2000044c
 80026e0:	20000450 	.word	0x20000450
 80026e4:	200004ac 	.word	0x200004ac
 80026e8:	200004b4 	.word	0x200004b4
 80026ec:	2000049c 	.word	0x2000049c
 80026f0:	20000398 	.word	0x20000398
 80026f4:	20000394 	.word	0x20000394
 80026f8:	200004a4 	.word	0x200004a4
 80026fc:	200004a8 	.word	0x200004a8

08002700 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <vTaskSwitchContext+0x9c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <vTaskSwitchContext+0xa0>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002714:	e03d      	b.n	8002792 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <vTaskSwitchContext+0xa0>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <vTaskSwitchContext+0xa4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	e007      	b.n	8002734 <vTaskSwitchContext+0x34>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <vTaskSwitchContext+0x2e>
 800272a:	b672      	cpsid	i
 800272c:	e7fe      	b.n	800272c <vTaskSwitchContext+0x2c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3b01      	subs	r3, #1
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	491c      	ldr	r1, [pc, #112]	; (80027a8 <vTaskSwitchContext+0xa8>)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	0013      	movs	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	189b      	adds	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	585b      	ldr	r3, [r3, r1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <vTaskSwitchContext+0x24>
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	0013      	movs	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	189b      	adds	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <vTaskSwitchContext+0xa8>)
 8002752:	189b      	adds	r3, r3, r2
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3308      	adds	r3, #8
 8002768:	429a      	cmp	r2, r3
 800276a:	d104      	bne.n	8002776 <vTaskSwitchContext+0x76>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <vTaskSwitchContext+0xac>)
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <vTaskSwitchContext+0xa4>)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <vTaskSwitchContext+0xac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	334c      	adds	r3, #76	; 0x4c
 800278c:	001a      	movs	r2, r3
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <vTaskSwitchContext+0xb0>)
 8002790:	601a      	str	r2, [r3, #0]
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	200004bc 	.word	0x200004bc
 80027a0:	200004a8 	.word	0x200004a8
 80027a4:	2000049c 	.word	0x2000049c
 80027a8:	20000398 	.word	0x20000398
 80027ac:	20000394 	.word	0x20000394
 80027b0:	20000010 	.word	0x20000010

080027b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80027bc:	f000 f84e 	bl	800285c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <prvIdleTask+0x1c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d9f9      	bls.n	80027bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80027c8:	f000 f9a2 	bl	8002b10 <vPortYield>
		prvCheckTasksWaitingTermination();
 80027cc:	e7f6      	b.n	80027bc <prvIdleTask+0x8>
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	20000398 	.word	0x20000398

080027d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	e00c      	b.n	80027fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	0013      	movs	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4a14      	ldr	r2, [pc, #80]	; (800283c <prvInitialiseTaskLists+0x68>)
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff fb8a 	bl	8001f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3301      	adds	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d9ef      	bls.n	80027e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <prvInitialiseTaskLists+0x6c>)
 8002802:	0018      	movs	r0, r3
 8002804:	f7ff fb80 	bl	8001f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <prvInitialiseTaskLists+0x70>)
 800280a:	0018      	movs	r0, r3
 800280c:	f7ff fb7c 	bl	8001f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <prvInitialiseTaskLists+0x74>)
 8002812:	0018      	movs	r0, r3
 8002814:	f7ff fb78 	bl	8001f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <prvInitialiseTaskLists+0x78>)
 800281a:	0018      	movs	r0, r3
 800281c:	f7ff fb74 	bl	8001f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <prvInitialiseTaskLists+0x7c>)
 8002822:	0018      	movs	r0, r3
 8002824:	f7ff fb70 	bl	8001f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <prvInitialiseTaskLists+0x80>)
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <prvInitialiseTaskLists+0x6c>)
 800282c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <prvInitialiseTaskLists+0x84>)
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <prvInitialiseTaskLists+0x70>)
 8002832:	601a      	str	r2, [r3, #0]
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000398 	.word	0x20000398
 8002840:	20000424 	.word	0x20000424
 8002844:	20000438 	.word	0x20000438
 8002848:	20000454 	.word	0x20000454
 800284c:	20000468 	.word	0x20000468
 8002850:	20000480 	.word	0x20000480
 8002854:	2000044c 	.word	0x2000044c
 8002858:	20000450 	.word	0x20000450

0800285c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002862:	e01a      	b.n	800289a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002864:	f000 f964 	bl	8002b30 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <prvCheckTasksWaitingTermination+0x50>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff fbc8 	bl	800200a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <prvCheckTasksWaitingTermination+0x54>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <prvCheckTasksWaitingTermination+0x54>)
 8002882:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <prvCheckTasksWaitingTermination+0x58>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <prvCheckTasksWaitingTermination+0x58>)
 800288c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800288e:	f000 f961 	bl	8002b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	0018      	movs	r0, r3
 8002896:	f000 f80f 	bl	80028b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <prvCheckTasksWaitingTermination+0x58>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e0      	bne.n	8002864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b002      	add	sp, #8
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000468 	.word	0x20000468
 80028b0:	20000494 	.word	0x20000494
 80028b4:	2000047c 	.word	0x2000047c

080028b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	334c      	adds	r3, #76	; 0x4c
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 fbad 	bl	8003024 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	22b1      	movs	r2, #177	; 0xb1
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 fa67 	bl	8002dac <vPortFree>
				vPortFree( pxTCB );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fa63 	bl	8002dac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80028e6:	e010      	b.n	800290a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	22b1      	movs	r2, #177	; 0xb1
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d104      	bne.n	80028fc <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fa59 	bl	8002dac <vPortFree>
	}
 80028fa:	e006      	b.n	800290a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	22b1      	movs	r2, #177	; 0xb1
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d001      	beq.n	800290a <prvDeleteTCB+0x52>
 8002906:	b672      	cpsid	i
 8002908:	e7fe      	b.n	8002908 <prvDeleteTCB+0x50>
	}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <prvResetNextTaskUnblockTime+0x34>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d104      	bne.n	800292e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <prvResetNextTaskUnblockTime+0x38>)
 8002926:	2201      	movs	r2, #1
 8002928:	4252      	negs	r2, r2
 800292a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800292c:	e008      	b.n	8002940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <prvResetNextTaskUnblockTime+0x34>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <prvResetNextTaskUnblockTime+0x38>)
 800293e:	601a      	str	r2, [r3, #0]
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000044c 	.word	0x2000044c
 800294c:	200004b4 	.word	0x200004b4

08002950 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3304      	adds	r3, #4
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff fb4f 	bl	800200a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3301      	adds	r3, #1
 8002970:	d10b      	bne.n	800298a <prvAddCurrentTaskToDelayedList+0x3a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1d1a      	adds	r2, r3, #4
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f7ff fae9 	bl	8001f5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002988:	e026      	b.n	80029d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	18d3      	adds	r3, r2, r3
 8002990:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d209      	bcs.n	80029b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3304      	adds	r3, #4
 80029ac:	0019      	movs	r1, r3
 80029ae:	0010      	movs	r0, r2
 80029b0:	f7ff faf5 	bl	8001f9e <vListInsert>
}
 80029b4:	e010      	b.n	80029d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029b6:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3304      	adds	r3, #4
 80029c0:	0019      	movs	r1, r3
 80029c2:	0010      	movs	r0, r2
 80029c4:	f7ff faeb 	bl	8001f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d202      	bcs.n	80029d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000498 	.word	0x20000498
 80029e4:	20000394 	.word	0x20000394
 80029e8:	20000480 	.word	0x20000480
 80029ec:	20000450 	.word	0x20000450
 80029f0:	2000044c 	.word	0x2000044c
 80029f4:	200004b4 	.word	0x200004b4

080029f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3b04      	subs	r3, #4
 8002a08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	0452      	lsls	r2, r2, #17
 8002a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3b04      	subs	r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3b04      	subs	r3, #4
 8002a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a24:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <pxPortInitialiseStack+0x50>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b14      	subs	r3, #20
 8002a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b20      	subs	r3, #32
 8002a3a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	08002a4d 	.word	0x08002a4d

08002a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <prvTaskExitError+0x2c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	d001      	beq.n	8002a62 <prvTaskExitError+0x16>
 8002a5e:	b672      	cpsid	i
 8002a60:	e7fe      	b.n	8002a60 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8002a62:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0fc      	beq.n	8002a66 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	2000000c 	.word	0x2000000c

08002a7c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002a90:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <pxCurrentTCBConst2>)
 8002a92:	6813      	ldr	r3, [r2, #0]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	3020      	adds	r0, #32
 8002a98:	f380 8809 	msr	PSP, r0
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f380 8814 	msr	CONTROL, r0
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002aa8:	46ae      	mov	lr, r5
 8002aaa:	bc08      	pop	{r3}
 8002aac:	bc04      	pop	{r2}
 8002aae:	b662      	cpsie	i
 8002ab0:	4718      	bx	r3
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46c0      	nop			; (mov r8, r8)

08002ac0 <pxCurrentTCBConst2>:
 8002ac0:	20000394 	.word	0x20000394
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46c0      	nop			; (mov r8, r8)

08002ac8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <xPortStartScheduler+0x40>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <xPortStartScheduler+0x40>)
 8002ad2:	21ff      	movs	r1, #255	; 0xff
 8002ad4:	0409      	lsls	r1, r1, #16
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <xPortStartScheduler+0x40>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <xPortStartScheduler+0x40>)
 8002ae0:	21ff      	movs	r1, #255	; 0xff
 8002ae2:	0609      	lsls	r1, r1, #24
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002ae8:	f000 f898 	bl	8002c1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <xPortStartScheduler+0x44>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002af2:	f7ff ffcd 	bl	8002a90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002af6:	f7ff fe03 	bl	8002700 <vTaskSwitchContext>
	prvTaskExitError();
 8002afa:	f7ff ffa7 	bl	8002a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	e000ed20 	.word	0xe000ed20
 8002b0c:	2000000c 	.word	0x2000000c

08002b10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <vPortYield+0x1c>)
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0552      	lsls	r2, r2, #21
 8002b1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002b1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002b20:	f3bf 8f6f 	isb	sy
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	e000ed04 	.word	0xe000ed04

08002b30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8002b34:	b672      	cpsid	i
    uxCriticalNesting++;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <vPortEnterCritical+0x20>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <vPortEnterCritical+0x20>)
 8002b3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002b40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002b44:	f3bf 8f6f 	isb	sy
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	2000000c 	.word	0x2000000c

08002b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <vPortExitCritical+0x2c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <vPortExitCritical+0x10>
 8002b60:	b672      	cpsid	i
 8002b62:	e7fe      	b.n	8002b62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <vPortExitCritical+0x2c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1e5a      	subs	r2, r3, #1
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <vPortExitCritical+0x2c>)
 8002b6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8002b6e:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <vPortExitCritical+0x2c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d100      	bne.n	8002b78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8002b76:	b662      	cpsie	i
    }
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	2000000c 	.word	0x2000000c

08002b84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002b84:	f3ef 8010 	mrs	r0, PRIMASK
 8002b88:	b672      	cpsid	i
 8002b8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	0018      	movs	r0, r3

08002b90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002b90:	f380 8810 	msr	PRIMASK, r0
 8002b94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8002b96:	46c0      	nop			; (mov r8, r8)
	...

08002ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ba0:	f3ef 8009 	mrs	r0, PSP
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <pxCurrentTCBConst>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	3820      	subs	r0, #32
 8002baa:	6010      	str	r0, [r2, #0]
 8002bac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002bae:	4644      	mov	r4, r8
 8002bb0:	464d      	mov	r5, r9
 8002bb2:	4656      	mov	r6, sl
 8002bb4:	465f      	mov	r7, fp
 8002bb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002bb8:	b508      	push	{r3, lr}
 8002bba:	b672      	cpsid	i
 8002bbc:	f7ff fda0 	bl	8002700 <vTaskSwitchContext>
 8002bc0:	b662      	cpsie	i
 8002bc2:	bc0c      	pop	{r2, r3}
 8002bc4:	6811      	ldr	r1, [r2, #0]
 8002bc6:	6808      	ldr	r0, [r1, #0]
 8002bc8:	3010      	adds	r0, #16
 8002bca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002bcc:	46a0      	mov	r8, r4
 8002bce:	46a9      	mov	r9, r5
 8002bd0:	46b2      	mov	sl, r6
 8002bd2:	46bb      	mov	fp, r7
 8002bd4:	f380 8809 	msr	PSP, r0
 8002bd8:	3820      	subs	r0, #32
 8002bda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002bdc:	4718      	bx	r3
 8002bde:	46c0      	nop			; (mov r8, r8)

08002be0 <pxCurrentTCBConst>:
 8002be0:	20000394 	.word	0x20000394
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46c0      	nop			; (mov r8, r8)

08002be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bee:	f7ff ffc9 	bl	8002b84 <ulSetInterruptMaskFromISR>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002bf6:	f7ff fcd3 	bl	80025a0 <xTaskIncrementTick>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d003      	beq.n	8002c06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <SysTick_Handler+0x30>)
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0552      	lsls	r2, r2, #21
 8002c04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7ff ffc1 	bl	8002b90 <vClearInterruptMaskFromISR>
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <prvSetupTimerInterrupt+0x34>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <prvSetupTimerInterrupt+0x38>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <prvSetupTimerInterrupt+0x3c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	22fa      	movs	r2, #250	; 0xfa
 8002c32:	0091      	lsls	r1, r2, #2
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7fd fa67 	bl	8000108 <__udivsi3>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <prvSetupTimerInterrupt+0x40>)
 8002c40:	3a01      	subs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <prvSetupTimerInterrupt+0x34>)
 8002c46:	2207      	movs	r2, #7
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	e000e010 	.word	0xe000e010
 8002c54:	e000e018 	.word	0xe000e018
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	e000e014 	.word	0xe000e014

08002c60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8002c6c:	f7ff fc00 	bl	8002470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c70:	4b49      	ldr	r3, [pc, #292]	; (8002d98 <pvPortMalloc+0x138>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c78:	f000 f8e0 	bl	8002e3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <pvPortMalloc+0x13c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4013      	ands	r3, r2
 8002c84:	d000      	beq.n	8002c88 <pvPortMalloc+0x28>
 8002c86:	e079      	b.n	8002d7c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8002c8e:	2208      	movs	r2, #8
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2207      	movs	r2, #7
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d00a      	beq.n	8002cb4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	4393      	bics	r3, r2
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2207      	movs	r2, #7
 8002cac:	4013      	ands	r3, r2
 8002cae:	d001      	beq.n	8002cb4 <pvPortMalloc+0x54>
 8002cb0:	b672      	cpsid	i
 8002cb2:	e7fe      	b.n	8002cb2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d060      	beq.n	8002d7c <pvPortMalloc+0x11c>
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <pvPortMalloc+0x140>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d85b      	bhi.n	8002d7c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002cc4:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <pvPortMalloc+0x144>)
 8002cc6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002cc8:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <pvPortMalloc+0x144>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cce:	e004      	b.n	8002cda <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d903      	bls.n	8002cec <pvPortMalloc+0x8c>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f1      	bne.n	8002cd0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002cec:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <pvPortMalloc+0x138>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d042      	beq.n	8002d7c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	2308      	movs	r3, #8
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d916      	bls.n	8002d46 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	18d3      	adds	r3, r2, r3
 8002d1e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2207      	movs	r2, #7
 8002d24:	4013      	ands	r3, r2
 8002d26:	d001      	beq.n	8002d2c <pvPortMalloc+0xcc>
 8002d28:	b672      	cpsid	i
 8002d2a:	e7fe      	b.n	8002d2a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad2      	subs	r2, r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f8db 	bl	8002efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <pvPortMalloc+0x140>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <pvPortMalloc+0x140>)
 8002d52:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <pvPortMalloc+0x140>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <pvPortMalloc+0x148>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d203      	bcs.n	8002d68 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <pvPortMalloc+0x140>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <pvPortMalloc+0x148>)
 8002d66:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <pvPortMalloc+0x13c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002d7c:	f7ff fb84 	bl	8002488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2207      	movs	r2, #7
 8002d84:	4013      	ands	r3, r2
 8002d86:	d001      	beq.n	8002d8c <pvPortMalloc+0x12c>
 8002d88:	b672      	cpsid	i
 8002d8a:	e7fe      	b.n	8002d8a <pvPortMalloc+0x12a>
	return pvReturn;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b006      	add	sp, #24
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	200010c8 	.word	0x200010c8
 8002d9c:	200010d4 	.word	0x200010d4
 8002da0:	200010cc 	.word	0x200010cc
 8002da4:	200010c0 	.word	0x200010c0
 8002da8:	200010d0 	.word	0x200010d0

08002dac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d035      	beq.n	8002e2a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	18d3      	adds	r3, r2, r3
 8002dc6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <vPortFree+0x88>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <vPortFree+0x30>
 8002dd8:	b672      	cpsid	i
 8002dda:	e7fe      	b.n	8002dda <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <vPortFree+0x3c>
 8002de4:	b672      	cpsid	i
 8002de6:	e7fe      	b.n	8002de6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <vPortFree+0x88>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4013      	ands	r3, r2
 8002df2:	d01a      	beq.n	8002e2a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <vPortFree+0x88>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e0c:	f7ff fb30 	bl	8002470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <vPortFree+0x8c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	18d2      	adds	r2, r2, r3
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <vPortFree+0x8c>)
 8002e1c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 f86b 	bl	8002efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002e26:	f7ff fb2f 	bl	8002488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	200010d4 	.word	0x200010d4
 8002e38:	200010cc 	.word	0x200010cc

08002e3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e42:	23c0      	movs	r3, #192	; 0xc0
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <prvHeapInit+0xa8>)
 8002e4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2207      	movs	r2, #7
 8002e50:	4013      	ands	r3, r2
 8002e52:	d00c      	beq.n	8002e6e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3307      	adds	r3, #7
 8002e58:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	4393      	bics	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1ad2      	subs	r2, r2, r3
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <prvHeapInit+0xa8>)
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <prvHeapInit+0xac>)
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <prvHeapInit+0xac>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	18d3      	adds	r3, r2, r3
 8002e84:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002e86:	2208      	movs	r2, #8
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2207      	movs	r2, #7
 8002e92:	4393      	bics	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <prvHeapInit+0xb0>)
 8002e9a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <prvHeapInit+0xb0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <prvHeapInit+0xb0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	1ad2      	subs	r2, r2, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <prvHeapInit+0xb0>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <prvHeapInit+0xb4>)
 8002ec8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <prvHeapInit+0xb8>)
 8002ed0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <prvHeapInit+0xbc>)
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	0612      	lsls	r2, r2, #24
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	200004c0 	.word	0x200004c0
 8002ee8:	200010c0 	.word	0x200010c0
 8002eec:	200010c8 	.word	0x200010c8
 8002ef0:	200010d0 	.word	0x200010d0
 8002ef4:	200010cc 	.word	0x200010cc
 8002ef8:	200010d4 	.word	0x200010d4

08002efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f04:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <prvInsertBlockIntoFreeList+0xa8>)
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e002      	b.n	8002f10 <prvInsertBlockIntoFreeList+0x14>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d8f7      	bhi.n	8002f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	18d3      	adds	r3, r2, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d108      	bne.n	8002f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	18d2      	adds	r2, r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	18d2      	adds	r2, r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d118      	bne.n	8002f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <prvInsertBlockIntoFreeList+0xac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d00d      	beq.n	8002f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	18d2      	adds	r2, r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e008      	b.n	8002f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <prvInsertBlockIntoFreeList+0xac>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e003      	b.n	8002f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d002      	beq.n	8002f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	200010c0 	.word	0x200010c0
 8002fa8:	200010c8 	.word	0x200010c8

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4d0c      	ldr	r5, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	f000 f8f1 	bl	80031a4 <_init>
 8002fc2:	4d0a      	ldr	r5, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	00b3      	lsls	r3, r6, #2
 8002fd2:	58eb      	ldr	r3, [r5, r3]
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	00b3      	lsls	r3, r6, #2
 8002fdc:	58eb      	ldr	r3, [r5, r3]
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	080032c8 	.word	0x080032c8
 8002fe8:	080032c8 	.word	0x080032c8
 8002fec:	080032c8 	.word	0x080032c8
 8002ff0:	080032cc 	.word	0x080032cc

08002ff4 <__retarget_lock_acquire_recursive>:
 8002ff4:	4770      	bx	lr

08002ff6 <__retarget_lock_release_recursive>:
 8002ff6:	4770      	bx	lr

08002ff8 <memset>:
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	1882      	adds	r2, r0, r2
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	7019      	strb	r1, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <cleanup_glue>:
 8003008:	b570      	push	{r4, r5, r6, lr}
 800300a:	000d      	movs	r5, r1
 800300c:	6809      	ldr	r1, [r1, #0]
 800300e:	0004      	movs	r4, r0
 8003010:	2900      	cmp	r1, #0
 8003012:	d001      	beq.n	8003018 <cleanup_glue+0x10>
 8003014:	f7ff fff8 	bl	8003008 <cleanup_glue>
 8003018:	0029      	movs	r1, r5
 800301a:	0020      	movs	r0, r4
 800301c:	f000 f878 	bl	8003110 <_free_r>
 8003020:	bd70      	pop	{r4, r5, r6, pc}
	...

08003024 <_reclaim_reent>:
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <_reclaim_reent+0xc8>)
 8003026:	b570      	push	{r4, r5, r6, lr}
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0004      	movs	r4, r0
 800302c:	4283      	cmp	r3, r0
 800302e:	d049      	beq.n	80030c4 <_reclaim_reent+0xa0>
 8003030:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <_reclaim_reent+0x28>
 8003036:	2500      	movs	r5, #0
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	42ab      	cmp	r3, r5
 800303c:	d147      	bne.n	80030ce <_reclaim_reent+0xaa>
 800303e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	2900      	cmp	r1, #0
 8003044:	d002      	beq.n	800304c <_reclaim_reent+0x28>
 8003046:	0020      	movs	r0, r4
 8003048:	f000 f862 	bl	8003110 <_free_r>
 800304c:	6961      	ldr	r1, [r4, #20]
 800304e:	2900      	cmp	r1, #0
 8003050:	d002      	beq.n	8003058 <_reclaim_reent+0x34>
 8003052:	0020      	movs	r0, r4
 8003054:	f000 f85c 	bl	8003110 <_free_r>
 8003058:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800305a:	2900      	cmp	r1, #0
 800305c:	d002      	beq.n	8003064 <_reclaim_reent+0x40>
 800305e:	0020      	movs	r0, r4
 8003060:	f000 f856 	bl	8003110 <_free_r>
 8003064:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003066:	2900      	cmp	r1, #0
 8003068:	d002      	beq.n	8003070 <_reclaim_reent+0x4c>
 800306a:	0020      	movs	r0, r4
 800306c:	f000 f850 	bl	8003110 <_free_r>
 8003070:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003072:	2900      	cmp	r1, #0
 8003074:	d002      	beq.n	800307c <_reclaim_reent+0x58>
 8003076:	0020      	movs	r0, r4
 8003078:	f000 f84a 	bl	8003110 <_free_r>
 800307c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800307e:	2900      	cmp	r1, #0
 8003080:	d002      	beq.n	8003088 <_reclaim_reent+0x64>
 8003082:	0020      	movs	r0, r4
 8003084:	f000 f844 	bl	8003110 <_free_r>
 8003088:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800308a:	2900      	cmp	r1, #0
 800308c:	d002      	beq.n	8003094 <_reclaim_reent+0x70>
 800308e:	0020      	movs	r0, r4
 8003090:	f000 f83e 	bl	8003110 <_free_r>
 8003094:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003096:	2900      	cmp	r1, #0
 8003098:	d002      	beq.n	80030a0 <_reclaim_reent+0x7c>
 800309a:	0020      	movs	r0, r4
 800309c:	f000 f838 	bl	8003110 <_free_r>
 80030a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030a2:	2900      	cmp	r1, #0
 80030a4:	d002      	beq.n	80030ac <_reclaim_reent+0x88>
 80030a6:	0020      	movs	r0, r4
 80030a8:	f000 f832 	bl	8003110 <_free_r>
 80030ac:	69a3      	ldr	r3, [r4, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <_reclaim_reent+0xa0>
 80030b2:	0020      	movs	r0, r4
 80030b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030b6:	4798      	blx	r3
 80030b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80030ba:	2900      	cmp	r1, #0
 80030bc:	d002      	beq.n	80030c4 <_reclaim_reent+0xa0>
 80030be:	0020      	movs	r0, r4
 80030c0:	f7ff ffa2 	bl	8003008 <cleanup_glue>
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	5949      	ldr	r1, [r1, r5]
 80030c8:	2900      	cmp	r1, #0
 80030ca:	d108      	bne.n	80030de <_reclaim_reent+0xba>
 80030cc:	3504      	adds	r5, #4
 80030ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030d0:	68d9      	ldr	r1, [r3, #12]
 80030d2:	2d80      	cmp	r5, #128	; 0x80
 80030d4:	d1f7      	bne.n	80030c6 <_reclaim_reent+0xa2>
 80030d6:	0020      	movs	r0, r4
 80030d8:	f000 f81a 	bl	8003110 <_free_r>
 80030dc:	e7af      	b.n	800303e <_reclaim_reent+0x1a>
 80030de:	680e      	ldr	r6, [r1, #0]
 80030e0:	0020      	movs	r0, r4
 80030e2:	f000 f815 	bl	8003110 <_free_r>
 80030e6:	0031      	movs	r1, r6
 80030e8:	e7ee      	b.n	80030c8 <_reclaim_reent+0xa4>
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	20000010 	.word	0x20000010

080030f0 <__malloc_lock>:
 80030f0:	b510      	push	{r4, lr}
 80030f2:	4802      	ldr	r0, [pc, #8]	; (80030fc <__malloc_lock+0xc>)
 80030f4:	f7ff ff7e 	bl	8002ff4 <__retarget_lock_acquire_recursive>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	200010d8 	.word	0x200010d8

08003100 <__malloc_unlock>:
 8003100:	b510      	push	{r4, lr}
 8003102:	4802      	ldr	r0, [pc, #8]	; (800310c <__malloc_unlock+0xc>)
 8003104:	f7ff ff77 	bl	8002ff6 <__retarget_lock_release_recursive>
 8003108:	bd10      	pop	{r4, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	200010d8 	.word	0x200010d8

08003110 <_free_r>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	0005      	movs	r5, r0
 8003114:	2900      	cmp	r1, #0
 8003116:	d010      	beq.n	800313a <_free_r+0x2a>
 8003118:	1f0c      	subs	r4, r1, #4
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	da00      	bge.n	8003122 <_free_r+0x12>
 8003120:	18e4      	adds	r4, r4, r3
 8003122:	0028      	movs	r0, r5
 8003124:	f7ff ffe4 	bl	80030f0 <__malloc_lock>
 8003128:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <_free_r+0x90>)
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <_free_r+0x2c>
 8003130:	6063      	str	r3, [r4, #4]
 8003132:	6014      	str	r4, [r2, #0]
 8003134:	0028      	movs	r0, r5
 8003136:	f7ff ffe3 	bl	8003100 <__malloc_unlock>
 800313a:	bd70      	pop	{r4, r5, r6, pc}
 800313c:	42a3      	cmp	r3, r4
 800313e:	d908      	bls.n	8003152 <_free_r+0x42>
 8003140:	6821      	ldr	r1, [r4, #0]
 8003142:	1860      	adds	r0, r4, r1
 8003144:	4283      	cmp	r3, r0
 8003146:	d1f3      	bne.n	8003130 <_free_r+0x20>
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	1841      	adds	r1, r0, r1
 800314e:	6021      	str	r1, [r4, #0]
 8003150:	e7ee      	b.n	8003130 <_free_r+0x20>
 8003152:	001a      	movs	r2, r3
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <_free_r+0x4e>
 800315a:	42a3      	cmp	r3, r4
 800315c:	d9f9      	bls.n	8003152 <_free_r+0x42>
 800315e:	6811      	ldr	r1, [r2, #0]
 8003160:	1850      	adds	r0, r2, r1
 8003162:	42a0      	cmp	r0, r4
 8003164:	d10b      	bne.n	800317e <_free_r+0x6e>
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	1809      	adds	r1, r1, r0
 800316a:	1850      	adds	r0, r2, r1
 800316c:	6011      	str	r1, [r2, #0]
 800316e:	4283      	cmp	r3, r0
 8003170:	d1e0      	bne.n	8003134 <_free_r+0x24>
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	1841      	adds	r1, r0, r1
 8003178:	6011      	str	r1, [r2, #0]
 800317a:	6053      	str	r3, [r2, #4]
 800317c:	e7da      	b.n	8003134 <_free_r+0x24>
 800317e:	42a0      	cmp	r0, r4
 8003180:	d902      	bls.n	8003188 <_free_r+0x78>
 8003182:	230c      	movs	r3, #12
 8003184:	602b      	str	r3, [r5, #0]
 8003186:	e7d5      	b.n	8003134 <_free_r+0x24>
 8003188:	6821      	ldr	r1, [r4, #0]
 800318a:	1860      	adds	r0, r4, r1
 800318c:	4283      	cmp	r3, r0
 800318e:	d103      	bne.n	8003198 <_free_r+0x88>
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	1841      	adds	r1, r0, r1
 8003196:	6021      	str	r1, [r4, #0]
 8003198:	6063      	str	r3, [r4, #4]
 800319a:	6054      	str	r4, [r2, #4]
 800319c:	e7ca      	b.n	8003134 <_free_r+0x24>
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	200010dc 	.word	0x200010dc

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
